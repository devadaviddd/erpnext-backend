org: devadavid
app: erpnext-application
service: erp-backend
frameworkVersion: "3"
useDotenv: true

plugins:
  - serverless-dotenv-plugin
  - serverless-offline-local-authorizers-plugin
  - serverless-offline
  - serverless-import-apigateway

custom:
  dotenv:
    path: ".env" 
  importApiGateway:
    name: erpGate
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  environment:
    USERS_TABLE: "users"
    USER_POOL_ID: { Ref: UserPool }
    CLIENT_ID: { Ref: UserClient }
    REST_API_ID: ${env:REST_API_ID}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/users"

        # Cognito permissions
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"

functions:
  createUser:
    handler: src/index.handler
    events:
      - http: 
          path: /user
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
          arn:
            Fn::GetAtt:
              - UserPool
              - Arn
          claims:
            - email

  registerTrialPlan:
    handler: src/index.handler
    events:
      - http: 
          path: /user/trial
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
          arn:
            Fn::GetAtt:
              - UserPool
              - Arn
          claims:
            - email

  registerPremiumPlan:
    handler: src/index.handler
    events:
      - http: 
          path: /user/premium
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: 
              Ref: ApiGatewayAuthorizer
          arn:
            Fn::GetAtt:
              - UserPool
              - Arn
          claims:
            - email

  login:
    handler: src/index.handler
    events:
      - http:
          path: /auth/login
          method: post

  signup:
    handler: src/index.handler
    events:
      - http:
          path: /auth/signup
          method: post

  scheduling-expired-plan:
    handler: src/index.handler
    events:
      - http:
          path: /schedule-expired-plan
          method: get
          
resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true            
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5 # 5 hours
        IdTokenValidity: 5 # 5 hours
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH" # which can be used to authorize users with username and password
        
            
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ERPUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: ${env:REST_API_ID}
        ProviderARNs:
          - Fn::GetAtt:
              - UserPool
              - Arn

