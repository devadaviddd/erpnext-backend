app: erpnext-application
service: erp-backend-api
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-import-apigateway

custom:
  stage: ${opt:stage, 'dev'}
  dotenv:
    path: '.env'
  importApiGateway:
    name: erpGate
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${self:custom.stage}
  environment:
    USERS_TABLE: 'users'
    USER_POOL_ID: ${env:USER_POOL_ID_LOCAL}
    CLIENT_ID: { Ref: UserClient }
    REST_API_ID: ${env:REST_API_ID}
  versionFunctions: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
          Resource:
            - 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/users'
            - 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/users/index/email-index'

        # Lambda permissions to ssh into EC2 instances
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
          Resource:
            - '*'

        # Cognito permissions
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminDeleteUser
          Resource: '*'

        # Route53 permissions
        - Effect: Allow
          Action:
            - route53:ChangeResourceRecordSets
            - route53:ListHostedZonesByName
          Resource: '*'

functions:
  registerTrialPlan:
    name: ${self:provider.stage}-registerTrialPlan
    handler: src/index.handler
    events:
      - http:
          path: /user/trial
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          arn:
            - arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/${env:USER_POOL_ID_LOCAL}

          claims:
            - email
          cors: true

  registerPremiumPlan:
    name: ${self:provider.stage}-registerPremiumPlan
    handler: src/index.handler
    events:
      - http:
          path: /user/premium
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          arn:
            - arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/${env:USER_POOL_ID_LOCAL}
          claims:
            - email
          cors: true

  login:
    name: ${self:provider.stage}-login
    handler: src/index.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true

  signup:
    name: ${self:provider.stage}-signup
    handler: src/index.handler
    events:
      - http:
          path: /auth/signup
          method: post
          cors: true

  scheduling-expired-plan:
    name: ${self:provider.stage}-scheduling-expired-plan
    handler: src/index.handler
    events:
      - http:
          path: /schedule-expired-plan
          method: get
          cors: true
      - sqs: arn:aws:sqs:${aws:region}:${aws:accountId}:queue-test
    timeout: 30

  scheduling-expired-plan-sqs:
    name: ${self:provider.stage}-scheduling-expired-plan-sqs
    handler: src/lambdas/scheduling-expired-plan.handler
    events:
      - sqs: arn:aws:sqs:${aws:region}:${aws:accountId}:${self:provider.stage}-trial-plan-expired-check-queue
    timeout: 30

  config-site:
    name: ${self:provider.stage}-config-site
    handler: src/index.handler
    events:
      - http:
          path: /server/config-site
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true
          arn:
            - arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/${env:USER_POOL_ID_LOCAL}
          claims:
            - email

  create-site-url:
    name: ${self:provider.stage}-create-site-url
    handler: src/lambdas/url/create-site-url/index.handler
    url:
      cors: true
    timeout: 900


resources:
  Resources:
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        UserPoolId: ${env:USER_POOL_ID_LOCAL}
        AccessTokenValidity: 5 # 5 hours
        IdTokenValidity: 5 # 5 hours
        ExplicitAuthFlows:
          - 'ALLOW_ADMIN_USER_PASSWORD_AUTH'
          - 'ALLOW_REFRESH_TOKEN_AUTH'
          - 'ALLOW_USER_PASSWORD_AUTH'

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: VertexUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: ${env:REST_API_ID}
        ProviderARNs:
          - arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/${env:USER_POOL_ID_LOCAL}
